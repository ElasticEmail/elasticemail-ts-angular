/**
 * Elastic Email REST API
 * This API is based on the REST API architecture, allowing the user to easily manage their data with this resource-based approach.    Every API call is established on which specific request type (GET, POST, PUT, DELETE) will be used.    To start using this API, you will need your Access Token (available <a href=\"https://elasticemail.com/account#/settings/new/manage-api\">here</a>). Remember to keep it safe. Required access levels are listed in the given request’s description.    This is the documentation for REST API. If you’d like to read our legacy documentation regarding Web API v2 click <a href=\"https://api.elasticemail.com/public/help\">here</a>.
 *
 * The version of the OpenAPI document: 4.0.0
 * Contact: support@elasticemail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { HttpHeaders }                                       from '@angular/common/http';

import { Observable }                                        from 'rxjs';

import { CompressionFormat } from '../model/models';
import { EventType } from '../model/models';
import { EventsOrderBy } from '../model/models';
import { ExportFileFormats } from '../model/models';
import { ExportLink } from '../model/models';
import { ExportStatus } from '../model/models';
import { RecipientEvent } from '../model/models';


import { Configuration }                                     from '../configuration';



export interface EventsServiceInterface {
    defaultHeaders: HttpHeaders;
    configuration: Configuration;

    /**
     * Load Email Events
     * Returns a log of delivery events for the specific transaction ID. Required Access Level: ViewReports
     * @param transactionid ID number of transaction
     * @param from Starting date for search in YYYY-MM-DDThh:mm:ss format.
     * @param to Ending date for search in YYYY-MM-DDThh:mm:ss format.
     * @param orderBy 
     * @param limit Maximum number of returned items.
     * @param offset How many items should be returned ahead.
     */
    eventsByTransactionidGet(transactionid: string, from?: string, to?: string, orderBy?: EventsOrderBy, limit?: number, offset?: number, extraHttpRequestParams?: any): Observable<Array<RecipientEvent>>;

    /**
     * Export Channel Events
     * Export delivery events log information to the specified file format. Required Access Level: Export
     * @param name Name of selected channel.
     * @param eventTypes Types of Events to return
     * @param from Starting date for search in YYYY-MM-DDThh:mm:ss format.
     * @param to Ending date for search in YYYY-MM-DDThh:mm:ss format.
     * @param fileFormat Format of the exported file
     * @param compressionFormat FileResponse compression format. None or Zip.
     * @param fileName Name of your file including extension.
     */
    eventsChannelsByNameExportPost(name: string, eventTypes?: Array<EventType>, from?: string, to?: string, fileFormat?: ExportFileFormats, compressionFormat?: CompressionFormat, fileName?: string, extraHttpRequestParams?: any): Observable<ExportLink>;

    /**
     * Load Channel Events
     * Returns a log of delivery events filtered by specified parameters. Required Access Level: ViewReports
     * @param name Name of selected channel.
     * @param eventTypes Types of Events to return
     * @param from Starting date for search in YYYY-MM-DDThh:mm:ss format.
     * @param to Ending date for search in YYYY-MM-DDThh:mm:ss format.
     * @param orderBy 
     * @param limit How many items to load. Maximum for this request is 1000 items
     * @param offset How many items should be returned ahead.
     */
    eventsChannelsByNameGet(name: string, eventTypes?: Array<EventType>, from?: string, to?: string, orderBy?: EventsOrderBy, limit?: number, offset?: number, extraHttpRequestParams?: any): Observable<Array<RecipientEvent>>;

    /**
     * Check Channel Export Status
     * Check the current status of the channel export. Required Access Level: Export
     * @param id ID of the exported file
     */
    eventsChannelsExportByIdStatusGet(id: string, extraHttpRequestParams?: any): Observable<ExportStatus>;

    /**
     * Check Export Status
     * Check the current status of the export. Required Access Level: Export
     * @param id ID of the exported file
     */
    eventsExportByIdStatusGet(id: string, extraHttpRequestParams?: any): Observable<ExportStatus>;

    /**
     * Export Events
     * Export delivery events log information to the specified file format. Required Access Level: Export
     * @param eventTypes Types of Events to return
     * @param from Starting date for search in YYYY-MM-DDThh:mm:ss format.
     * @param to Ending date for search in YYYY-MM-DDThh:mm:ss format.
     * @param fileFormat Format of the exported file
     * @param compressionFormat FileResponse compression format. None or Zip.
     * @param fileName Name of your file including extension.
     */
    eventsExportPost(eventTypes?: Array<EventType>, from?: string, to?: string, fileFormat?: ExportFileFormats, compressionFormat?: CompressionFormat, fileName?: string, extraHttpRequestParams?: any): Observable<ExportLink>;

    /**
     * Load Events
     * Returns a log of delivery events filtered by specified parameters. Required Access Level: ViewReports
     * @param eventTypes Types of Events to return
     * @param from Starting date for search in YYYY-MM-DDThh:mm:ss format.
     * @param to Ending date for search in YYYY-MM-DDThh:mm:ss format.
     * @param orderBy 
     * @param limit How many items to load. Maximum for this request is 1000 items
     * @param offset How many items should be returned ahead.
     */
    eventsGet(eventTypes?: Array<EventType>, from?: string, to?: string, orderBy?: EventsOrderBy, limit?: number, offset?: number, extraHttpRequestParams?: any): Observable<Array<RecipientEvent>>;

}
