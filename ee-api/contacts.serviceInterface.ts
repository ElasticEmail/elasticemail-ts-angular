/**
 * Elastic Email REST API
 * This API is based on the REST API architecture, allowing the user to easily manage their data with this resource-based approach.    Every API call is established on which specific request type (GET, POST, PUT, DELETE) will be used.    To start using this API, you will need your Access Token (available <a href=\"https://elasticemail.com/account#/settings/new/manage-api\">here</a>). Remember to keep it safe. Required access levels are listed in the given request’s description.    This is the documentation for REST API. If you’d like to read our legacy documentation regarding Web API v2 click <a href=\"https://api.elasticemail.com/public/help\">here</a>.
 *
 * The version of the OpenAPI document: 4.0.0
 * Contact: support@elasticemail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { HttpHeaders }                                       from '@angular/common/http';

import { Observable }                                        from 'rxjs';

import { CompressionFormat } from '../model/models';
import { Contact } from '../model/models';
import { ContactHistory } from '../model/models';
import { ContactPayload } from '../model/models';
import { ContactUpdatePayload } from '../model/models';
import { EmailsPayload } from '../model/models';
import { ExportFileFormats } from '../model/models';
import { ExportLink } from '../model/models';
import { ExportStatus } from '../model/models';


import { Configuration }                                     from '../configuration';



export interface ContactsServiceInterface {
    defaultHeaders: HttpHeaders;
    configuration: Configuration;

    /**
     * Delete Contact
     * Deletes the provided contact. Required Access Level: ModifyContacts
     * @param email Proper email address.
     */
    contactsByEmailDelete(email: string, extraHttpRequestParams?: any): Observable<{}>;

    /**
     * Load Contact
     * Load detailed contact information for specified email. Required Access Level: ViewContacts
     * @param email Proper email address.
     */
    contactsByEmailGet(email: string, extraHttpRequestParams?: any): Observable<Contact>;

    /**
     * Load History
     * Returns detailed history of specified Contact. Required Access Level: ViewContacts
     * @param email Proper email address.
     * @param limit Maximum number of returned items.
     * @param offset How many items should be returned ahead.
     */
    contactsByEmailHistoryGet(email: string, limit?: number, offset?: number, extraHttpRequestParams?: any): Observable<Array<ContactHistory>>;

    /**
     * Update Contact
     * Update selected contact. Omitted contact\&#39;s fields will not be changed. Required Access Level: ModifyContacts
     * @param email Proper email address.
     * @param contactUpdatePayload 
     */
    contactsByEmailPut(email: string, contactUpdatePayload: ContactUpdatePayload, extraHttpRequestParams?: any): Observable<Contact>;

    /**
     * Delete Contacts Bulk
     * Deletes provided contacts in bulk. Required Access Level: ModifyContacts
     * @param emailsPayload Provide either rule or a list of emails, not both.
     */
    contactsDeletePost(emailsPayload: EmailsPayload, extraHttpRequestParams?: any): Observable<{}>;

    /**
     * Check Export Status
     * Check the current status of the export. Required Access Level: Export
     * @param id ID of the exported file
     */
    contactsExportByIdStatusGet(id: string, extraHttpRequestParams?: any): Observable<ExportStatus>;

    /**
     * Export Contacts
     * Request an Export of specified Contacts. Required Access Level: Export
     * @param fileFormat Format of the exported file
     * @param rule Query used for filtering.
     * @param emails Comma delimited list of contact emails
     * @param compressionFormat FileResponse compression format. None or Zip.
     * @param fileName Name of your file including extension.
     */
    contactsExportPost(fileFormat?: ExportFileFormats, rule?: string, emails?: Array<string>, compressionFormat?: CompressionFormat, fileName?: string, extraHttpRequestParams?: any): Observable<ExportLink>;

    /**
     * Load Contacts
     * Returns a list of contacts. Required Access Level: ViewContacts
     * @param limit Maximum number of returned items.
     * @param offset How many items should be returned ahead.
     */
    contactsGet(limit?: number, offset?: number, extraHttpRequestParams?: any): Observable<Array<Contact>>;

    /**
     * Upload Contacts
     * Upload contacts from a file. Required Access Level: ModifyContacts
     * @param listName Name of an existing list to add these contacts to
     * @param encodingName In what encoding the file is uploaded
     * @param file 
     */
    contactsImportPost(listName?: string, encodingName?: string, file?: Blob, extraHttpRequestParams?: any): Observable<{}>;

    /**
     * Add Contact
     * Add new Contacts to your Lists. Up to 1000 can be added (for more please refer to the import request). Required Access Level: ModifyContacts
     * @param contactPayload 
     * @param listnames Names of lists to which the uploaded contacts should be added to
     */
    contactsPost(contactPayload: Array<ContactPayload>, listnames?: Array<string>, extraHttpRequestParams?: any): Observable<Array<Contact>>;

}
