/**
 * Elastic Email REST API
 * This API is based on the REST API architecture, allowing the user to easily manage their data with this resource-based approach.    Every API call is established on which specific request type (GET, POST, PUT, DELETE) will be used.    The API has a limit of 20 concurrent connections and a hard timeout of 600 seconds per request.    To start using this API, you will need your Access Token (available <a target=\"_blank\" href=\"https://elasticemail.com/account#/settings/new/manage-api\">here</a>). Remember to keep it safe. Required access levels are listed in the given request’s description.    This is the documentation for REST API. If you’d like to read our legacy documentation regarding Web API v2 click <a target=\"_blank\" href=\"https://api.elasticemail.com/public/help\">here</a>.    Downloadable library clients can be found in our Github repository <a target=\"_blank\" href=\"https://github.com/ElasticEmail?tab=repositories&q=%22rest+api%22+in%3Areadme\">here</a>
 *
 * The version of the OpenAPI document: 4.0.0
 * Contact: support@elasticemail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { HttpHeaders }                                       from '@angular/common/http';

import { Observable }                                        from 'rxjs';

import { Template } from '../model/models';
import { TemplatePayload } from '../model/models';
import { TemplateScope } from '../model/models';
import { TemplateType } from '../model/models';


import { Configuration }                                     from '../configuration';



export interface TemplatesServiceInterface {
    defaultHeaders: HttpHeaders;
    configuration: Configuration;

    /**
     * Delete Template
     * Delete template with the specified name. Required Access Level: ModifyTemplates
     * @param name Name of template.
     */
    templatesByNameDelete(name: string, extraHttpRequestParams?: any): Observable<{}>;

    /**
     * Load Template
     * Load detailed information of the specified template. Required Access Level: ViewTemplates
     * @param name Name of template.
     */
    templatesByNameGet(name: string, extraHttpRequestParams?: any): Observable<Template>;

    /**
     * Update Template
     * Update existing template, overwriting existing data. Required Access Level: ModifyTemplates
     * @param name Name of template.
     * @param templatePayload 
     */
    templatesByNamePut(name: string, templatePayload: TemplatePayload, extraHttpRequestParams?: any): Observable<Template>;

    /**
     * Load Templates
     * Returns a list of templates for the specified type. Required Access Level: ViewTemplates
     * @param scopeType Return templates with specified scope only
     * @param templateTypes Return templates with specified type only
     * @param limit Maximum number of returned items.
     * @param offset How many items should be returned ahead.
     */
    templatesGet(scopeType: Array<TemplateScope>, templateTypes?: Array<TemplateType>, limit?: number, offset?: number, extraHttpRequestParams?: any): Observable<Array<Template>>;

    /**
     * Add Template
     * Add a new Template. Required Access Level: ModifyTemplates
     * @param templatePayload 
     */
    templatesPost(templatePayload: TemplatePayload, extraHttpRequestParams?: any): Observable<Template>;

}
