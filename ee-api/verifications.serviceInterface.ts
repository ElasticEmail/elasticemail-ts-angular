/**
 * Elastic Email REST API
 * This API is based on the REST API architecture, allowing the user to easily manage their data with this resource-based approach.    Every API call is established on which specific request type (GET, POST, PUT, DELETE) will be used.    To start using this API, you will need your Access Token (available <a target=\"_blank\" href=\"https://elasticemail.com/account#/settings/new/manage-api\">here</a>). Remember to keep it safe. Required access levels are listed in the given request’s description.    This is the documentation for REST API. If you’d like to read our legacy documentation regarding Web API v2 click <a target=\"_blank\" href=\"https://api.elasticemail.com/public/help\">here</a>.    Downloadable library clients can be found in our Github repository <a target=\"_blank\" href=\"https://github.com/ElasticEmail?tab=repositories&q=%22rest+api%22+in%3Areadme\">here</a>
 *
 * The version of the OpenAPI document: 4.0.0
 * Contact: support@elasticemail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { HttpHeaders }                                       from '@angular/common/http';

import { Observable }                                        from 'rxjs';

import { EmailValidationResult } from '../model/models';
import { VerificationFileResult } from '../model/models';
import { VerificationFileResultDetails } from '../model/models';


import { Configuration }                                     from '../configuration';



export interface VerificationsServiceInterface {
    defaultHeaders: HttpHeaders;
    configuration: Configuration;

    /**
     * Delete Email Verification Result
     * Delete a result with given email if exists. Required Access Level: VerifyEmails
     * @param email Email address to verification
     */
    verificationsByEmailDelete(email: string, extraHttpRequestParams?: any): Observable<{}>;

    /**
     * Get Email Verification Result
     * Returns a result of verified email. Required Access Level: ViewEmailVerifications
     * @param email Email address to view verification result of
     */
    verificationsByEmailGet(email: string, extraHttpRequestParams?: any): Observable<EmailValidationResult>;

    /**
     * Verify Email
     * Verify single email address and returns result of verification. Required Access Level: VerifyEmails
     * @param email Email address to verify
     */
    verificationsByEmailPost(email: string, extraHttpRequestParams?: any): Observable<EmailValidationResult>;

    /**
     * Delete File Verification Result
     * Delete Verification Results if they exist. Required Access Level: VerifyEmails
     * @param id ID of the exported file
     */
    verificationsFilesByIdDelete(id: string, extraHttpRequestParams?: any): Observable<{}>;

    /**
     * Download File Verification Result
     * Download verification results as a ZIP file. Required Access Level: VerifyEmails
     * @param id Verification ID to download
     */
    verificationsFilesByIdResultDownloadGet(id: string, extraHttpRequestParams?: any): Observable<Blob>;

    /**
     * Get Detailed File Verification Result
     * Returns status and results (if verified) of file with given ID. Required Access Level: ViewEmailVerifications
     * @param id ID of the Verification to display status of
     * @param limit Maximum number of returned email verification results
     * @param offset How many result items should be returned ahead
     */
    verificationsFilesByIdResultGet(id: string, limit?: number, offset?: number, extraHttpRequestParams?: any): Observable<VerificationFileResultDetails>;

    /**
     * Start verification
     * Start a verification of the previously uploaded file with emails. Required Access Level: VerifyEmails
     * @param id File ID to start verification
     */
    verificationsFilesByIdVerificationPost(id: string, extraHttpRequestParams?: any): Observable<{}>;

    /**
     * Upload File with Emails
     * Uploads a CSV file with list of emails that can then be triggered for verification. An \&#39;email\&#39; column is required. Required Access Level: VerifyEmails
     * @param file 
     */
    verificationsFilesPost(file?: Blob, extraHttpRequestParams?: any): Observable<VerificationFileResult>;

    /**
     * Get Files Verification Results
     * Returns a list of uploaded files, their statuses and results. Required Access Level: ViewEmailVerifications
     */
    verificationsFilesResultGet(extraHttpRequestParams?: any): Observable<Array<VerificationFileResult>>;

    /**
     * Get Emails Verification Results
     * Returns a results of all verified single emails. Required Access Level: ViewEmailVerifications
     * @param limit Maximum number of returned items.
     * @param offset How many items should be returned ahead.
     */
    verificationsGet(limit?: number, offset?: number, extraHttpRequestParams?: any): Observable<Array<EmailValidationResult>>;

}
