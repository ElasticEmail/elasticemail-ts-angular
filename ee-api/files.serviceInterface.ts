/**
 * Elastic Email REST API
 * This API is based on the REST API architecture, allowing the user to easily manage their data with this resource-based approach.    Every API call is established on which specific request type (GET, POST, PUT, DELETE) will be used.    To start using this API, you will need your Access Token (available <a href=\"https://elasticemail.com/account#/settings/new/manage-api\">here</a>). Remember to keep it safe. Required access levels are listed in the given request’s description.    This is the documentation for REST API. If you’d like to read our legacy documentation regarding Web API v2 click <a href=\"https://api.elasticemail.com/public/help\">here</a>.
 *
 * The version of the OpenAPI document: 4.0.0
 * Contact: support@elasticemail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { HttpHeaders }                                       from '@angular/common/http';

import { Observable }                                        from 'rxjs';

import { FileInfo } from '../model/models';
import { FilePayload } from '../model/models';


import { Configuration }                                     from '../configuration';



export interface FilesServiceInterface {
    defaultHeaders: HttpHeaders;
    configuration: Configuration;

    /**
     * Delete File
     * Permanently deletes the file from your Account. Required Access Level: ModifyFiles
     * @param name Name of your file including extension.
     */
    filesByNameDelete(name: string, extraHttpRequestParams?: any): Observable<{}>;

    /**
     * Download File
     * Gets content of the specified File. Required Access Level: ViewFiles
     * @param name Name of your file including extension.
     */
    filesByNameGet(name: string, extraHttpRequestParams?: any): Observable<Blob>;

    /**
     * Load File Details
     * Returns the specified File\&#39;s details. Required Access Level: ViewFiles
     * @param name Name of your file including extension.
     */
    filesByNameInfoGet(name: string, extraHttpRequestParams?: any): Observable<FileInfo>;

    /**
     * List Files
     * Returns a list of all your available files. Required Access Level: ViewFiles
     * @param limit Maximum number of returned items.
     * @param offset How many items should be returned ahead.
     */
    filesGet(limit?: number, offset?: number, extraHttpRequestParams?: any): Observable<Array<FileInfo>>;

    /**
     * Upload File
     * Uploads selected file to the server. Required Access Level: ModifyFiles
     * @param filePayload 
     * @param expiresAfterDays After how many days should the file be deleted.
     */
    filesPost(filePayload: FilePayload, expiresAfterDays?: number, extraHttpRequestParams?: any): Observable<FileInfo>;

}
